// <auto-generated />
using System;
using Fomo.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fomo.Infrastructure.Migrations
{
    [DbContext(typeof(EFCoreDbContext))]
    partial class EFCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fomo.Domain.Entities.TradeMethod", b =>
                {
                    b.Property<int>("TradeMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TradeMethodId"));

                    b.Property<bool>("Bollinger")
                        .HasColumnType("bit");

                    b.Property<bool>("Other")
                        .HasColumnType("bit");

                    b.Property<bool>("Rsi")
                        .HasColumnType("bit");

                    b.Property<bool>("Sma")
                        .HasColumnType("bit");

                    b.Property<bool>("Stochastic")
                        .HasColumnType("bit");

                    b.Property<int>("TradeResultId")
                        .HasColumnType("int");

                    b.HasKey("TradeMethodId");

                    b.HasIndex("TradeResultId")
                        .IsUnique();

                    b.ToTable("TradeMethods");
                });

            modelBuilder.Entity("Fomo.Domain.Entities.TradeResult", b =>
                {
                    b.Property<int>("TradeResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TradeResultId"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EntryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberOfStocks")
                        .HasColumnType("int");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TradeResultId");

                    b.HasIndex("UserId");

                    b.ToTable("TradeResults", t =>
                        {
                            t.HasCheckConstraint("CK_Product_EntryPrice_NonNegative", "[EntryPrice] >= 0");

                            t.HasCheckConstraint("CK_Product_ExitPrice_NonNegative", "[ExitPrice] >= 0");

                            t.HasCheckConstraint("CK_Product_NumberOfStocks_NonNegative", "[NumberOfStocks] >= 0");
                        });
                });

            modelBuilder.Entity("Fomo.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("BollingerAlert")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RsiAlert")
                        .HasColumnType("bit");

                    b.Property<bool>("SmaAlert")
                        .HasColumnType("bit");

                    b.Property<bool>("StochasticAlert")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("Auth0Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Fomo.Domain.Entities.TradeMethod", b =>
                {
                    b.HasOne("Fomo.Domain.Entities.TradeResult", "TradeResult")
                        .WithOne("TradeMethod")
                        .HasForeignKey("Fomo.Domain.Entities.TradeMethod", "TradeResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeResult");
                });

            modelBuilder.Entity("Fomo.Domain.Entities.TradeResult", b =>
                {
                    b.HasOne("Fomo.Domain.Entities.User", "User")
                        .WithMany("TradeResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fomo.Domain.Entities.TradeResult", b =>
                {
                    b.Navigation("TradeMethod");
                });

            modelBuilder.Entity("Fomo.Domain.Entities.User", b =>
                {
                    b.Navigation("TradeResults");
                });
#pragma warning restore 612, 618
        }
    }
}
